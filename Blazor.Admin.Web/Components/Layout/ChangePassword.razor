@using Microsoft.AspNetCore.Identity
@using Framework.Core.Blazor.Admin.SqlServer.Auth.Models
@using MagicPropsComponents.ViewModels.Modal
@using MagicPropsComponents.ViewModels.Input
@using System.ComponentModel.DataAnnotations
@inject UserManager<ApplicationUser> UserManager
<MagicPropsComponents.Components.Modal.MPModal Title="@L["Action.ChangePassword"]" @bind-Visible="_modalVisible" CloseBtnVisible FooterVisible="false" ClickOutsideToClose="false">
    <BodyTemplate>
        <div class="mt-2">
            <EditForm Model="_model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <div class="mx-3 my-2">
                    <MagicPropsComponents.Components.Input.MPInput Title="@L["Model.NewPassword"]" InputType="InputType.Password" @bind-Value=@_model.NewPassword ValidationFieldName="NewPassword" Width="450" />
                    <ValidationMessage For="()=>_model.NewPassword" />
                </div>
                <div class="mx-3 my-2">
                    <MagicPropsComponents.Components.Input.MPInput Title="@L["Model.NewPasswordConfirm"]" InputType="InputType.Password" @bind-Value=@_model.NewPasswordConfirm ValidationFieldName="NewPasswordConfirm" Width="450" />
                    <ValidationMessage For="()=>_model.NewPasswordConfirm" />
                </div>
                <div class="mx-3 mt-3 d-flex justify-content-end">
                    <button type="submit" class="btn btn-primary">@L["Action.Update"]</button>
                    <div class="ms-2 btn btn-secondary" @onclick="()=>{_modalVisible=false;}">@L["Action.Cancel"]</div>
                </div>
            </EditForm>
        </div>
    </BodyTemplate>
</MagicPropsComponents.Components.Modal.MPModal>
@code {
    [CascadingParameter(Name = "NewLayout")]
    public IMainLayout? MainLayout { get; set; }

    private bool _modalVisible = false;
    private ApplicationUser _user = new ApplicationUser();
    private ChangePwdModel _model;

    private async Task OnValidSubmit()
    {
        var token = await UserManager.GeneratePasswordResetTokenAsync(_user);
        var roles = await UserManager.GetRolesAsync(_user);
        var claims = await UserManager.GetClaimsAsync(_user);
        var res = await UserManager.ResetPasswordAsync(_user, token, _model.NewPassword);
        if (!res.Succeeded)
        {
            await MainLayout!.AddNotice(L["Action.Update"] + " " + L["Model.Password"] + "-" + L["Result.Failed"], NoticeStatus.Falied);
            List<string> errorCodes = res.Errors.Select(x => x.Code).ToList();
            string errorMsg = string.Empty;
            if (errorCodes.Any(x => x == "PasswordRequiresLower"))
            {
                errorMsg += L["Model.Password"] + L["Error.RequiresLower"] + "; ";
            }
            if (errorCodes.Any(x => x == "PasswordRequiresUpper"))
            {
                errorMsg += L["Model.Password"] + L["Error.RequiresUpper"] + "; ";
            }
            if (errorCodes.Any(x => x == "PasswordRequiresDigit"))
            {
                errorMsg += L["Model.Password"] + L["Error.RequiresDigit"] + "; ";
            }
            //other error code...
            if (string.IsNullOrEmpty(errorMsg))
            {
                errorMsg = L["Error.Default"] + L["Action.Update"] + " " + L["Model.Password"];
            }
            else
            {
                errorMsg = errorMsg.Substring(0, errorMsg.Length - 2);
            }
            await MainLayout!.AddNotice(errorMsg, NoticeStatus.Falied);
            return;
        }
        await UserManager.AddToRolesAsync(_user, roles ?? new List<string>());
        await UserManager.AddClaimsAsync(_user, claims ?? new List<System.Security.Claims.Claim>());
        _modalVisible = false;
        await MainLayout!.AddNotice(L["Action.Update"] + " " + L["Model.Password"] + " " + L["Result.Success"]);
    }

    public async Task ShowChangePasswordModal()
    {
        if (!string.IsNullOrEmpty(global.UserName))
        {
            _user = await UserManager.FindByNameAsync(global.UserName) ?? new ApplicationUser();
        }
        _model = new ChangePwdModel(L);
        _modalVisible = true;
    }

    protected override void OnInitialized()
    {
        _model = new ChangePwdModel(L);
    }

    // public class ChangePwdModel
    // {
    //     [Required(ErrorMessage = "New Password is required.")]
    //     [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 8)]
    //     [Display(Name = "New Password")]
    //     public string NewPassword { get; set; } = "";

    //     [Display(Name = "New Password Confirm")]
    //     [Compare("NewPassword", ErrorMessage = "The password and confirmation password do not match.")]
    //     public string NewPasswordConfirm { get; set; } = "";
    // }
}
